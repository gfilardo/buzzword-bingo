{"mappings":"AAEA,MAuEaA,EAA6B,CAvET,CAC/BC,IAAK,eACLC,MAAO,eACPC,MAAO,CACL,mBACA,WACA,UACA,aACA,mBACA,aACA,QACA,wBACA,UACA,oBACA,UACA,YACA,UACA,WACA,eACA,gBACA,YACA,WACA,cACA,YACA,WACA,cACA,YACA,gBACA,cACA,WACA,SACA,WACA,aAIyB,CAC3BF,IAAK,WACLC,MAAO,WACPC,MAAO,CACL,WACA,gBACA,gBACA,iBACA,gBACA,mBACA,aACA,eACA,gBACA,oBACA,aACA,UACA,cACA,WACA,UACA,YACA,oBACA,YACA,kBACA,kBACA,iBACA,YACA,aACA,gBACA,MACA,eACA,mBClEG,MAAMC,UAA2BC,YAItCC,YAAoBC,EAAuCC,EAAoCC,GAC7FC,Q,2BADkBH,E,kBAAuCC,E,iBAAoCC,EAE7FE,KAAKC,cAAcL,GACnBI,KAAKE,SACLF,KAAKG,qBACP,CAEAD,SACEF,KAAKF,YAAYM,UAAY,8CAEtBJ,KAAKH,aAAaQ,QAAO,CAACC,EAAKC,IAAiB,GAAGD,mBAAqBC,EAAIjB,QAASiB,EAAIjB,MAAQU,KAAKJ,sBAAwB,WAAa,MAAOW,EAAIhB,kBAAmB,mDAEvJS,KAAKQ,mBAAmBhB,MAAMiB,wCAC/BT,KAAKQ,mBAAmBhB,MAAMkB,OAAOC,KAAK,wBAEpE,CAEAV,cAAcW,GACZZ,KAAKJ,sBAAwBgB,EAC7BZ,KAAKQ,mBAAqBR,KAAKH,aAAagB,MAAKN,GAAOA,EAAIjB,MAAQsB,IACpEZ,KAAKE,QACP,CAEAC,sBACEH,KAAKF,YAAYgB,iBAAiB,UAAWC,IAC3C,MAAMH,EAAgBG,EAAEC,OAAOC,MAC/BjB,KAAKkB,cAAc,IAAIC,YAAY,SAAU,CAAEC,OAAQ,CAAEC,WAAYT,MACrEZ,KAAKC,cAAcW,EAAA,GAEvB,EC9BF,MAAMU,EAAyB,eAC/B,IAAIC,EAAwBD,EAC5B,MAAME,EAAmBlC,GAAOD,EAAawB,MAAKN,GAAOA,EAAIjB,MAAQA,IACrE,IAAImC,EAAqBD,EAAiBD,GAE1C,MAAMG,EAAQ,IC2CP,MAIL/B,YAAY0B,EAA8BvB,G,iBAAAA,EACxCE,KAAK2B,yBAAyBN,GAC9BrB,KAAKG,qBACP,CAEAD,SAEEF,KAAKF,YAAYM,UAAY,uCAG3BJ,KAAK4B,MAAMvB,QAAO,CAACC,EAAKuB,EAAGC,IAClBxB,EAAM,0BACEwB,gBAAgBC,KAAKC,MAAMF,EAAI,iBAAkBA,EAAI,kBAAmBD,EAAEI,MAAQ,QAAS,0BAA0BJ,EAAEK,+BAErI,uBAIP,CAEA/B,sBACEH,KAAKF,YAAYgB,iBAAiB,SAAUC,IAC1C,MAAMC,EAASD,EAAEC,OACjB,IAAMA,EAAOmB,UAAUC,SAAS,QAC9B,OAEF,MAAMC,EAAQC,SAAStB,EAAOuB,QAAQ,GAAQ,IACxCC,EAAOxC,KAAK4B,MAAMS,GACxB,IAAKG,GAAQxC,KAAK4B,MAAMS,GAAOJ,MAC7B,OAEFO,EAAKC,UAAYD,EAAKC,SACtBzB,EAAOmB,UAAUO,OAAO,YACxB,MAAMC,GAxCUC,EAjCG,CAAChB,IACxB,MAAMiB,EAAe,GACfC,EAAqBC,GAAsBA,EAAQC,OAAMlB,GAAKF,EAAME,GAAGW,UAAYb,EAAME,GAAGG,QAC5FgB,EAAiB,CAACC,EAAsBC,EAA0BC,EAAQ,KAC9E,MAAMC,EAAM,GACZ,IAAK,IAAIvB,EAAI,EAAGA,EAAIsB,EAAOtB,IACzBuB,EAAIC,KAAKJ,EAAepB,EAAEqB,GAE5B,OAAOE,CAAA,EAET,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAASP,EAAmB,EAAJM,EAAO,GACjCT,EAAkBU,IACpBX,EAAaS,KAAKE,EAEtB,CACA,IAAK,IAAI3B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAM4B,EAASR,EAAepB,EAAG,GAC7BiB,EAAkBW,IACpBZ,EAAaS,KAAKG,EAEtB,CACA,MAAMC,EAAWT,EAAe,EAAG,GAC/BH,EAAkBY,IACpBb,EAAaS,KAAKI,GAEpB,MAAMC,EAAWV,EAAe,IAAI,GAIpC,OAHIH,EAAkBa,IACpBd,EAAaS,KAAKK,GAEbd,CAAA,EA2C2Be,CAAiB5D,KAAK4B,OAxCF,IAAI,IAAIiC,IAAIjB,EAAQkB,UAAvD,IAAClB,EAyChB,IAAI5C,KAAKF,YAAYiE,iBAAiB,UAAUC,SAAQ,CAACC,EAAInC,KAC3DmC,EAAG9B,UAAUO,OAAO,UAAWC,EAASuB,SAASpC,GAAA,GACnD,GAEJ,CAEAqC,QACEnE,KAAK4B,MAAMoC,SAAQnC,GAAKA,EAAEY,UAAW,IACrCzC,KAAKE,QACP,CAEAyB,yBAAyBN,GACvB,MAAM7B,EAvGiB,EAAC4E,EAAa/C,KACvC,MAAMgD,EAAO,IAAIhD,GACXiD,EAAY,GAClB,KAAOF,KAAQ,GAAG,CAChB,MAAMG,EAAcxC,KAAKC,MAAMD,KAAKyC,SAAWH,EAAK5D,SAC7CgE,GAAWJ,EAAKK,OAAOH,EAAa,GAC3CD,EAAUhB,KAAKmB,EACjB,CACA,OAAOH,CAAA,EA+FSK,CAAY,GAAItD,GAC9BrB,KAAK4B,MAAQpC,EAAMoF,KAAI1C,IAAS,C,KAAEA,EAAMD,OAAO,EAAOQ,UAAU,MAChEzC,KAAK4B,MAAM8C,OAAO,GAAI,EAAG,CAAExC,KAAM,QAASD,OAAO,EAAMQ,UAAU,IACjEzC,KAAKE,QACP,GDjGsBuB,EAAmBjC,MAAOqF,SAASC,cAAc,WAC9C,IAAIrF,EAAmB6B,EAAwBjC,EAAcwF,SAASC,cAAc,wBAE5FhE,iBAAiB,UAAWC,IAC3CQ,EAAwBR,EAAEK,OAAOC,WACjCI,EAAqBD,EAAiBD,GACtCG,EAAMC,yBAAyBF,EAAmBjC,MAAK","sources":["src/vocabularies.ts","src/vocabulary_selector.component.ts","src/app.ts","src/board.component.ts"],"sourcesContent":["import { Vocabulary } from \"./types\";\n\nconst architecture: Vocabulary = {\n  key: 'architecture',\n  label: 'Architecture',\n  words: [\n    'business process',\n    'consumer',\n    'context',\n    'decoupling',\n    'enterprise-level',\n    'facilitate',\n    'focus',\n    'hyper-personalization',\n    'impacts',\n    'integration layer',\n    'journey',\n    'lifecycle',\n    'mindset',\n    'off-line',\n    'omni-channel',\n    'orchestration',\n    'ownership',\n    'paradigm',\n    'positioning',\n    'proactive',\n    'provider',\n    'refactoring',\n    'relevance',\n    'restructuring',\n    'reusability',\n    'scalable',\n    'shared',\n    'strategy',\n    'timeline'\n  ]\n};\n\nconst business: Vocabulary = {\n  key: 'business',\n  label: 'Business',\n  words: [\n    'Ballpark',\n    'Best practice',\n    'Blamestorming',\n    'Boil the ocean',\n    'Brainstorming',\n    'Core compentency',\n    'Empowering',\n    'Gap analysis',\n    'Goal-oriented',\n    'Impact assessment',\n    'Innovative',\n    'Inshore',\n    'Lean & mean',\n    'Leverage',\n    'Mindset',\n    'Mindshare',\n    'Mission statement',\n    'Open door',\n    'Out of the loop',\n    'Out of the loop',\n    'Paradigm shift',\n    'Proactive',\n    'Projection',\n    'Restructuring',\n    'ROI',\n    'Stakeholders',\n    'Team building'\n  ]\n};\n\n\nexport const vocabularies: Vocabulary[] = [ architecture, business ];\n","import { Vocabulary } from \"./types\";\n\nexport class VocabularySelector extends EventTarget {\n\n  private selectedVocabulary: Vocabulary;\n\n  constructor(private selectedVocabularyKey: string, private vocabularies: Vocabulary[], private rootElement: HTMLElement) {\n    super();\n    this.setVocabulary(selectedVocabularyKey);\n    this.render();\n    this.initializeListeners();\n  }\n\n  render() {\n    this.rootElement.innerHTML = `\n      <select class=\"selector\">\n        ${ this.vocabularies.reduce((acc, voc) => { return `${acc}<option value=\"${voc.key}\" ${ voc.key === this.selectedVocabularyKey ? 'selected' : '' }>${voc.label}</option>`}, '') }\n      </select>\n      <p>Vocabulary size: ${ this.selectedVocabulary.words.length }</p>\n      <textarea readonly>${ this.selectedVocabulary.words.sort().join(', ') }</textarea>\n    `;\n  }\n\n  setVocabulary(vocabularyKey: string) {\n    this.selectedVocabularyKey = vocabularyKey;\n    this.selectedVocabulary = this.vocabularies.find(voc => voc.key === vocabularyKey) as Vocabulary;\n    this.render();\n  }\n\n  initializeListeners() {\n    this.rootElement.addEventListener('change', (e) => {\n      const vocabularyKey = e.target.value;\n      this.dispatchEvent(new CustomEvent('change', { detail: { vocabulary: vocabularyKey } } ));\n      this.setVocabulary(vocabularyKey);\n    });\n  }\n\n}\n","import { Board } from \"./board.component\";\nimport { Vocabulary } from \"./types\";\nimport { vocabularies } from \"./vocabularies\";\nimport { VocabularySelector } from \"./vocabulary_selector.component\";\n\nconst DEFAULT_VOCABULARY_KEY = 'architecture';\nlet selectedVocabularyKey = DEFAULT_VOCABULARY_KEY;\nconst selectVocabulary = key => vocabularies.find(voc => voc.key === key) as Vocabulary;\nlet selectedVocabulary = selectVocabulary(selectedVocabularyKey);\n\nconst board = new Board(selectedVocabulary.words, document.querySelector('#board'));\nconst vocabularySelector = new VocabularySelector(DEFAULT_VOCABULARY_KEY, vocabularies, document.querySelector('#vocabularySelector'));\n\nvocabularySelector.addEventListener('change', (e) => {\n    selectedVocabularyKey = e.detail.vocabulary;\n    selectedVocabulary = selectVocabulary(selectedVocabularyKey);\n    board.initializeWithVocabulary(selectedVocabulary.words);\n});","export const randomWords = (num: number, vocabulary: string[]) => {\n  const pool = [...vocabulary];\n  const selection = [];\n  while (num-- > 0) {\n    const randomIndex = Math.floor(Math.random() * pool.length);\n    const [element] = pool.splice(randomIndex, 1);\n    selection.push(element);\n  }\n  return selection\n};\n\ninterface Cell {\n  word: string;\n  bonus: boolean;\n  selected: boolean;\n};\n\nconst winningSequences = (cells: Cell[]) => {\n  const winSequences = [];\n  const isWinningSequence = (indexes: number[]) => indexes.every(i => cells[i].selected || cells[i].bonus);\n  const createSequence = (initialIndex: number, offsetMultiplier: number, count = 5) => {\n    const seq = [];\n    for (let i = 0; i < count; i++) {\n      seq.push(initialIndex + i*offsetMultiplier);\n    }\n    return seq;\n  };\n  for (let r = 0; r < 5; r++) {\n    const rowSeq = createSequence(r * 5, 1);\n    if (isWinningSequence(rowSeq)) {\n      winSequences.push(rowSeq);\n    }\n  }\n  for (let c = 0; c < 5; c++) {\n    const colSeq = createSequence(c, 5);\n    if (isWinningSequence(colSeq)) {\n      winSequences.push(colSeq);\n    }\n  }\n  const diagSeq1 = createSequence(0, 6);\n  if (isWinningSequence(diagSeq1)) {\n    winSequences.push(diagSeq1);\n  }\n  const diagSeq2 = createSequence(20, -4);\n  if (isWinningSequence(diagSeq2)) {\n    winSequences.push(diagSeq2);\n  }\n  return winSequences;\n};\n\nconst winningCells = (winSeqs: number[][]): number[] => [...new Set(winSeqs.flat())];\n\n\nexport class Board {\n\n  private cells: Cell[];\n\n  constructor(vocabulary: string[], private rootElement: HTMLElement) {\n    this.initializeWithVocabulary(vocabulary);\n    this.initializeListeners();\n  }\n\n  render() {\n    // debugger\n    this.rootElement.innerHTML = `\n    <div class=\"board-grid\">\n    ${\n      this.cells.reduce((acc, c, i) => {\n        return acc + `\n        <div data-i='${i}' data-row=\"${Math.floor(i / 5)}\" data-col=\"${ i % 5 }\" class=\"cell ${c.bonus ? 'bonus': ''}\"><span class=\"word\">${c.word}</span></div>\n        `;\n      }, '')\n    }\n    </div>\n    `;\n  }\n\n  initializeListeners() {\n    this.rootElement.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if ( !target.classList.contains('cell') ) {\n        return;\n      }\n      const index = parseInt(target.dataset['i'] || '');\n      const cell = this.cells[index];\n      if (!cell || this.cells[index].bonus) {\n        return;\n      }\n      cell.selected = !cell.selected;\n      target.classList.toggle('selected');\n      const winCells = winningCells(winningSequences(this.cells));\n      [...this.rootElement.querySelectorAll('.cell')].forEach((el, i) => {\n        el.classList.toggle('winning', winCells.includes(i));\n      });\n    });\n  }\n\n  clean() {\n    this.cells.forEach(c => c.selected = false);\n    this.render();\n  }\n\n  initializeWithVocabulary(vocabulary: string[]) {\n    const words = randomWords(24, vocabulary);\n    this.cells = words.map(word => ({ word, bonus: false, selected: false }));\n    this.cells.splice(12, 0, { word: 'bonus', bonus: true, selected: true });\n    this.render();\n  }\n\n};"],"names":["$59ba51fc19ea69a4$export$3cb057e28d326d4c","key","label","words","$5964056e0001484f$export$541aeac65d9795ac","EventTarget","constructor","selectedVocabularyKey","vocabularies","rootElement","super","this","setVocabulary","render","initializeListeners","innerHTML","reduce","acc","voc","selectedVocabulary","length","sort","join","vocabularyKey","find","addEventListener","e","target","value","dispatchEvent","CustomEvent","detail","vocabulary","$f43313d21d3fd8e2$var$DEFAULT_VOCABULARY_KEY","$f43313d21d3fd8e2$var$selectedVocabularyKey","$f43313d21d3fd8e2$var$selectVocabulary","$f43313d21d3fd8e2$var$selectedVocabulary","$f43313d21d3fd8e2$var$board","initializeWithVocabulary","cells","c","i","Math","floor","bonus","word","classList","contains","index","parseInt","dataset","cell","selected","toggle","winCells","winSeqs","winSequences","isWinningSequence","indexes","every","createSequence","initialIndex","offsetMultiplier","count","seq","push","r","rowSeq","colSeq","diagSeq1","diagSeq2","$3ddd8876a3761123$var$winningSequences","Set","flat","querySelectorAll","forEach","el","includes","clean","num","pool","selection","randomIndex","random","element","splice","$3ddd8876a3761123$export$5c4a1bedf728edf8","map","document","querySelector"],"version":3,"file":"index.83bdc9c1.js.map"}