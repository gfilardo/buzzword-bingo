const e=[{key:"architecture",label:"Architecture",words:["business process","consumer","context","decoupling","enterprise-level","facilitate","focus","hyper-personalization","impacts","integration layer","journey","lifecycle","mindset","off-line","omni-channel","orchestration","ownership","paradigm","positioning","proactive","provider","refactoring","relevance","restructuring","reusability","scalable","shared","strategy","timeline"]},{key:"business",label:"Business",words:["Ballpark","Best practice","Blamestorming","Boil the ocean","Brainstorming","Core compentency","Empowering","Gap analysis","Goal-oriented","Impact assessment","Innovative","Inshore","Lean & mean","Leverage","Mindset","Mindshare","Mission statement","Open door","Out of the loop","Out of the loop","Paradigm shift","Proactive","Projection","Restructuring","ROI","Stakeholders","Team building"]}];class t extends EventTarget{constructor(e,t,s){super(),this.selectedVocabularyKey=e,this.vocabularies=t,this.rootElement=s,this.setVocabulary(e),this.render(),this.initializeListeners()}render(){this.rootElement.innerHTML=`\n      <select class="selector">\n        ${this.vocabularies.reduce(((e,t)=>`${e}<option value="${t.key}" ${t.key===this.selectedVocabularyKey?"selected":""}>${t.label}</option>`),"")}\n      </select>\n      <p>Vocabulary size: ${this.selectedVocabulary.words.length}</p>\n      <textarea readonly>${this.selectedVocabulary.words.sort().join(", ")}</textarea>\n    `}setVocabulary(e){this.selectedVocabularyKey=e,this.selectedVocabulary=this.vocabularies.find((t=>t.key===e)),this.render()}initializeListeners(){this.rootElement.addEventListener("change",(e=>{const t=e.target.value;this.dispatchEvent(new CustomEvent("change",{detail:{vocabulary:t}})),this.setVocabulary(t)}))}}const s="architecture";let i=s;const n=t=>e.find((e=>e.key===t));let r=n(i);const o=new class{constructor(e,t){this.rootElement=t,this.initializeWithVocabulary(e),this.initializeListeners()}render(){this.rootElement.innerHTML=`\n    <div class="board-grid">\n    ${this.cells.reduce(((e,t,s)=>e+`\n        <div data-i='${s}' data-row="${Math.floor(s/5)}" data-col="${s%5}" class="cell ${t.bonus?"bonus":""}"><span class="word">${t.word}</span></div>\n        `),"")}\n    </div>\n    `}initializeListeners(){this.rootElement.addEventListener("click",(e=>{const t=e.target;if(!t.classList.contains("cell"))return;const s=parseInt(t.dataset.i||""),i=this.cells[s];if(!i||this.cells[s].bonus)return;i.selected=!i.selected,t.classList.toggle("selected");const n=(r=(e=>{const t=[],s=t=>t.every((t=>e[t].selected||e[t].bonus)),i=(e,t,s=5)=>{const i=[];for(let n=0;n<s;n++)i.push(e+n*t);return i};for(let e=0;e<5;e++){const n=i(5*e,1);s(n)&&t.push(n)}for(let e=0;e<5;e++){const n=i(e,5);s(n)&&t.push(n)}const n=i(0,6);s(n)&&t.push(n);const r=i(20,-4);return s(r)&&t.push(r),t})(this.cells),[...new Set(r.flat())]);var r;[...this.rootElement.querySelectorAll(".cell")].forEach(((e,t)=>{e.classList.toggle("winning",n.includes(t))}))}))}clean(){this.cells.forEach((e=>e.selected=!1)),this.render()}initializeWithVocabulary(e){const t=((e,t)=>{const s=[...t],i=[];for(;e-- >0;){const e=Math.floor(Math.random()*s.length),[t]=s.splice(e,1);i.push(t)}return i})(24,e);this.cells=t.map((e=>({word:e,bonus:!1,selected:!1}))),this.cells.splice(12,0,{word:"bonus",bonus:!0,selected:!0}),this.render()}}(r.words,document.querySelector("#board"));new t(s,e,document.querySelector("#vocabularySelector")).addEventListener("change",(e=>{i=e.detail.vocabulary,r=n(i),o.initializeWithVocabulary(r.words)}));
//# sourceMappingURL=index.83bdc9c1.js.map
